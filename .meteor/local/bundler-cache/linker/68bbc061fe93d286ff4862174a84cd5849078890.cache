[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Factory;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"dburles:factory\":{\"factory.js\":[\"babel-runtime/helpers/classCallCheck\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/dburles_factory/factory.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});\n/* global LocalCollection */                                                                                          // 1\n/* global Factory:true */                                                                                             // 2\n                                                                                                                      //\nvar factories = {};                                                                                                   // 4\n                                                                                                                      //\nFactory = function () {                                                                                               // 6\n  function Factory(name, collection, attributes) {                                                                    // 7\n    _classCallCheck(this, Factory);                                                                                   // 7\n                                                                                                                      //\n    this.name = name;                                                                                                 // 8\n    this.collection = collection;                                                                                     // 9\n    this.attributes = attributes;                                                                                     // 10\n    this.afterHooks = [];                                                                                             // 11\n    this.sequence = 0;                                                                                                // 12\n  }                                                                                                                   // 13\n                                                                                                                      //\n  Factory.prototype.after = function () {                                                                             // 6\n    function after(fn) {                                                                                              // 6\n      this.afterHooks.push(fn);                                                                                       // 16\n      return this;                                                                                                    // 17\n    }                                                                                                                 // 18\n                                                                                                                      //\n    return after;                                                                                                     // 6\n  }();                                                                                                                // 6\n                                                                                                                      //\n  return Factory;                                                                                                     // 6\n}();                                                                                                                  // 6\n                                                                                                                      //\nFactory.define = function (name, collection, attributes) {                                                            // 21\n  factories[name] = new Factory(name, collection, attributes);                                                        // 22\n  return factories[name];                                                                                             // 23\n};                                                                                                                    // 24\n                                                                                                                      //\nFactory.get = function (name) {                                                                                       // 26\n  var factory = factories[name];                                                                                      // 27\n  if (!factory) {                                                                                                     // 28\n    throw new Error(\"Factory: There is no factory named \" + name);                                                    // 29\n  }                                                                                                                   // 30\n  return factory;                                                                                                     // 31\n};                                                                                                                    // 32\n                                                                                                                      //\nFactory.build = function (name) {                                                                                     // 34\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                            // 34\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                               // 34\n                                                                                                                      //\n  var factory = Factory.get(name);                                                                                    // 35\n  var result = {};                                                                                                    // 36\n                                                                                                                      //\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved                                      // 38\n  var extendedAttributes = _.extend({}, factory.attributes, attributes);                                              // 39\n                                                                                                                      //\n  // either create a new factory and return its _id                                                                   // 41\n  // or return a 'fake' _id (since we're not inserting anything)                                                      // 42\n  var makeRelation = function makeRelation(relName) {                                                                 // 43\n    if (options.insert) {                                                                                             // 44\n      return Factory.create(relName)._id;                                                                             // 45\n    }                                                                                                                 // 46\n    if (options.tree) {                                                                                               // 47\n      return Factory.build(relName, {}, { tree: true });                                                              // 48\n    }                                                                                                                 // 49\n    // fake an id on build                                                                                            // 50\n    return Random.id();                                                                                               // 51\n  };                                                                                                                  // 52\n                                                                                                                      //\n  var getValue = function getValue(value) {                                                                           // 54\n    return value instanceof Factory ? makeRelation(value.name) : value;                                               // 55\n  };                                                                                                                  // 56\n                                                                                                                      //\n  var getValueFromFunction = function getValueFromFunction(func) {                                                    // 58\n    var api = {                                                                                                       // 59\n      sequence: function () {                                                                                         // 60\n        function sequence(fn) {                                                                                       // 60\n          return fn(factory.sequence);                                                                                // 60\n        }                                                                                                             // 60\n                                                                                                                      //\n        return sequence;                                                                                              // 60\n      }()                                                                                                             // 60\n    };                                                                                                                // 59\n    var fnRes = func.call(result, api);                                                                               // 62\n    return getValue(fnRes);                                                                                           // 63\n  };                                                                                                                  // 64\n                                                                                                                      //\n  factory.sequence += 1;                                                                                              // 66\n                                                                                                                      //\n  var walk = function walk(record, object) {                                                                          // 68\n    _.each(object, function (value, key) {                                                                            // 69\n      var newValue = value;                                                                                           // 70\n      // is this a Factory instance?                                                                                  // 71\n      if (value instanceof Factory) {                                                                                 // 72\n        newValue = makeRelation(value.name);                                                                          // 73\n      } else if (_.isArray(value)) {                                                                                  // 74\n        newValue = value.map(function (element) {                                                                     // 75\n          if (_.isFunction(element)) {                                                                                // 76\n            return getValueFromFunction(element);                                                                     // 77\n          }                                                                                                           // 78\n          return getValue(element);                                                                                   // 79\n        });                                                                                                           // 80\n      } else if (_.isFunction(value)) {                                                                               // 81\n        newValue = getValueFromFunction(value);                                                                       // 82\n        // if an object literal is passed in, traverse deeper into it                                                 // 83\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {                                       // 84\n        record[key] = record[key] || {};                                                                              // 85\n        return walk(record[key], value);                                                                              // 86\n      }                                                                                                               // 87\n                                                                                                                      //\n      var modifier = { $set: {} };                                                                                    // 89\n                                                                                                                      //\n      if (key !== '_id') {                                                                                            // 91\n        modifier.$set[key] = newValue;                                                                                // 92\n      }                                                                                                               // 93\n                                                                                                                      //\n      LocalCollection._modify(record, modifier);                                                                      // 95\n    });                                                                                                               // 96\n  };                                                                                                                  // 97\n                                                                                                                      //\n  walk(result, extendedAttributes);                                                                                   // 99\n                                                                                                                      //\n  if (!options.tree) {                                                                                                // 101\n    result._id = extendedAttributes._id || Random.id();                                                               // 102\n  }                                                                                                                   // 103\n  return result;                                                                                                      // 104\n};                                                                                                                    // 105\n                                                                                                                      //\nFactory.tree = function (name, attributes) {                                                                          // 107\n  return Factory.build(name, attributes, { tree: true });                                                             // 108\n};                                                                                                                    // 109\n                                                                                                                      //\nFactory._create = function (name, doc) {                                                                              // 111\n  var collection = Factory.get(name).collection;                                                                      // 112\n  var insertId = collection.insert(doc);                                                                              // 113\n  var record = collection.findOne(insertId);                                                                          // 114\n  return record;                                                                                                      // 115\n};                                                                                                                    // 116\n                                                                                                                      //\nFactory.create = function (name) {                                                                                    // 118\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                            // 118\n                                                                                                                      //\n  var doc = Factory.build(name, attributes, { insert: true });                                                        // 119\n  var record = Factory._create(name, doc);                                                                            // 120\n                                                                                                                      //\n  Factory.get(name).afterHooks.forEach(function (cb) {                                                                // 122\n    return cb(record);                                                                                                // 122\n  });                                                                                                                 // 122\n                                                                                                                      //\n  return record;                                                                                                      // 124\n};                                                                                                                    // 125\n                                                                                                                      //\nFactory.extend = function (name) {                                                                                    // 127\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                            // 127\n                                                                                                                      //\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);                                                 // 128\n};                                                                                                                    // 129\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/dburles:factory/factory.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['dburles:factory'] = {}, {\n  Factory: Factory\n});\n\n})();\n","servePath":"/packages/dburles_factory.js","sourceMap":{"version":3,"sources":["/packages/dburles:factory/factory.js"],"names":["factories","Factory","name","collection","attributes","afterHooks","sequence","after","fn","push","define","get","factory","Error","build","options","result","extendedAttributes","_","extend","makeRelation","insert","create","relName","_id","tree","Random","id","getValue","value","getValueFromFunction","api","fnRes","func","call","walk","record","object","each","key","newValue","isArray","map","isFunction","element","Object","prototype","toString","modifier","$set","LocalCollection","_modify","_create","doc","insertId","findOne","forEach","cb","clone"],"mappings":"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","file":"/packages/dburles_factory.js","sourcesContent":["/* global LocalCollection */\n/* global Factory:true */\n\nconst factories = {};\n\nFactory = class Factory {\n  constructor(name, collection, attributes) {\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  after(fn) {\n    this.afterHooks.push(fn);\n    return this;\n  }\n};\n\nFactory.define = (name, collection, attributes) => {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = name => {\n  const factory = factories[name];\n  if (! factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n  return factory;\n};\n\nFactory.build = (name, attributes = {}, options = {}) => {\n  const factory = Factory.get(name);\n  const result = {};\n\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\n\n  // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n  const makeRelation = relName => {\n    if (options.insert) {\n      return Factory.create(relName)._id;\n    }\n    if (options.tree) {\n      return Factory.build(relName, {}, {tree: true});\n    }\n    // fake an id on build\n    return Random.id();\n  };\n\n  const getValue = value => {\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\n  };\n\n  const getValueFromFunction = func => {\n    const api = {\n      sequence: fn => fn(factory.sequence)\n    };\n    const fnRes = func.call(result, api);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  const walk = (record, object) => {\n    _.each(object, (value, key) => {\n      let newValue = value;\n      // is this a Factory instance?\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(element => {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value);\n      // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      const modifier = {$set: {}};\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (! options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n  return result;\n};\n\nFactory.tree = (name, attributes) => {\n  return Factory.build(name, attributes, {tree: true});\n};\n\nFactory._create = (name, doc) => {\n  const collection = Factory.get(name).collection;\n  const insertId = collection.insert(doc);\n  const record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = (name, attributes = {}) => {\n  const doc = Factory.build(name, attributes, {insert: true});\n  const record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\n\n  return record;\n};\n\nFactory.extend = (name, attributes = {}) => {\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n"]}}]