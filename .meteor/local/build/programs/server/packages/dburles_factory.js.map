{"version":3,"sources":["meteor://ðŸ’»app/packages/dburles:factory/factory.js"],"names":["factories","Factory","name","collection","attributes","afterHooks","sequence","after","fn","push","define","get","factory","Error","build","options","result","extendedAttributes","_","extend","makeRelation","insert","create","relName","_id","tree","Random","id","getValue","value","getValueFromFunction","api","fnRes","func","call","walk","record","object","each","key","newValue","isArray","map","isFunction","element","Object","prototype","toString","modifier","$set","LocalCollection","_modify","_create","doc","insertId","findOne","forEach","cb","clone"],"mappings":"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","file":"/packages/dburles_factory.js","sourcesContent":["/* global LocalCollection */\n/* global Factory:true */\n\nconst factories = {};\n\nFactory = class Factory {\n  constructor(name, collection, attributes) {\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  after(fn) {\n    this.afterHooks.push(fn);\n    return this;\n  }\n};\n\nFactory.define = (name, collection, attributes) => {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = name => {\n  const factory = factories[name];\n  if (! factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n  return factory;\n};\n\nFactory.build = (name, attributes = {}, options = {}) => {\n  const factory = Factory.get(name);\n  const result = {};\n\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\n\n  // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n  const makeRelation = relName => {\n    if (options.insert) {\n      return Factory.create(relName)._id;\n    }\n    if (options.tree) {\n      return Factory.build(relName, {}, {tree: true});\n    }\n    // fake an id on build\n    return Random.id();\n  };\n\n  const getValue = value => {\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\n  };\n\n  const getValueFromFunction = func => {\n    const api = {\n      sequence: fn => fn(factory.sequence)\n    };\n    const fnRes = func.call(result, api);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  const walk = (record, object) => {\n    _.each(object, (value, key) => {\n      let newValue = value;\n      // is this a Factory instance?\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(element => {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value);\n      // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      const modifier = {$set: {}};\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (! options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n  return result;\n};\n\nFactory.tree = (name, attributes) => {\n  return Factory.build(name, attributes, {tree: true});\n};\n\nFactory._create = (name, doc) => {\n  const collection = Factory.get(name).collection;\n  const insertId = collection.insert(doc);\n  const record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = (name, attributes = {}) => {\n  const doc = Factory.build(name, attributes, {insert: true});\n  const record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\n\n  return record;\n};\n\nFactory.extend = (name, attributes = {}) => {\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n"]}